// Code generated by go-swagger; DO NOT EDIT.

package assignment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostAssignmentParams creates a new PostAssignmentParams object
// with the default values initialized.
func NewPostAssignmentParams() *PostAssignmentParams {
	var ()
	return &PostAssignmentParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostAssignmentParamsWithTimeout creates a new PostAssignmentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostAssignmentParamsWithTimeout(timeout time.Duration) *PostAssignmentParams {
	var ()
	return &PostAssignmentParams{

		timeout: timeout,
	}
}

// NewPostAssignmentParamsWithContext creates a new PostAssignmentParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostAssignmentParamsWithContext(ctx context.Context) *PostAssignmentParams {
	var ()
	return &PostAssignmentParams{

		Context: ctx,
	}
}

// NewPostAssignmentParamsWithHTTPClient creates a new PostAssignmentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostAssignmentParamsWithHTTPClient(client *http.Client) *PostAssignmentParams {
	var ()
	return &PostAssignmentParams{
		HTTPClient: client,
	}
}

/*PostAssignmentParams contains all the parameters to send to the API endpoint
for the post assignment operation typically these are written to a http.Request
*/
type PostAssignmentParams struct {

	/*MaxRunTime
	  How long the job could be executed

	*/
	MaxRunTime *int64
	/*Name
	  The name of a job which will be executed

	*/
	Name string
	/*Params
	  The parameters that the job needs

	*/
	Params map[string]interface{}
	/*RunAt
	  What time the job will be executed

	*/
	RunAt *int64
	/*RunType
	  What type the job will be executed
	The values are 'asap','laterThan','inOrder'

	*/
	RunType string
	/*Version
	  The version of a job which will be executed

	*/
	Version string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post assignment params
func (o *PostAssignmentParams) WithTimeout(timeout time.Duration) *PostAssignmentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post assignment params
func (o *PostAssignmentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post assignment params
func (o *PostAssignmentParams) WithContext(ctx context.Context) *PostAssignmentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post assignment params
func (o *PostAssignmentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post assignment params
func (o *PostAssignmentParams) WithHTTPClient(client *http.Client) *PostAssignmentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post assignment params
func (o *PostAssignmentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMaxRunTime adds the maxRunTime to the post assignment params
func (o *PostAssignmentParams) WithMaxRunTime(maxRunTime *int64) *PostAssignmentParams {
	o.SetMaxRunTime(maxRunTime)
	return o
}

// SetMaxRunTime adds the maxRunTime to the post assignment params
func (o *PostAssignmentParams) SetMaxRunTime(maxRunTime *int64) {
	o.MaxRunTime = maxRunTime
}

// WithName adds the name to the post assignment params
func (o *PostAssignmentParams) WithName(name string) *PostAssignmentParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the post assignment params
func (o *PostAssignmentParams) SetName(name string) {
	o.Name = name
}

// WithParams adds the params to the post assignment params
func (o *PostAssignmentParams) WithParams(params map[string]interface{}) *PostAssignmentParams {
	o.SetParams(params)
	return o
}

// SetParams adds the params to the post assignment params
func (o *PostAssignmentParams) SetParams(params map[string]interface{}) {
	o.Params = params
}

// WithRunAt adds the runAt to the post assignment params
func (o *PostAssignmentParams) WithRunAt(runAt *int64) *PostAssignmentParams {
	o.SetRunAt(runAt)
	return o
}

// SetRunAt adds the runAt to the post assignment params
func (o *PostAssignmentParams) SetRunAt(runAt *int64) {
	o.RunAt = runAt
}

// WithRunType adds the runType to the post assignment params
func (o *PostAssignmentParams) WithRunType(runType string) *PostAssignmentParams {
	o.SetRunType(runType)
	return o
}

// SetRunType adds the runType to the post assignment params
func (o *PostAssignmentParams) SetRunType(runType string) {
	o.RunType = runType
}

// WithVersion adds the version to the post assignment params
func (o *PostAssignmentParams) WithVersion(version string) *PostAssignmentParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the post assignment params
func (o *PostAssignmentParams) SetVersion(version string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *PostAssignmentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.MaxRunTime != nil {

		// query param maxRunTime
		var qrMaxRunTime int64
		if o.MaxRunTime != nil {
			qrMaxRunTime = *o.MaxRunTime
		}
		qMaxRunTime := swag.FormatInt64(qrMaxRunTime)
		if qMaxRunTime != "" {
			if err := r.SetQueryParam("maxRunTime", qMaxRunTime); err != nil {
				return err
			}
		}

	}

	// query param name
	qrName := o.Name
	qName := qrName
	if qName != "" {
		if err := r.SetQueryParam("name", qName); err != nil {
			return err
		}
	}

	if o.Params != nil {
		if err := r.SetBodyParam(o.Params); err != nil {
			return err
		}
	}

	if o.RunAt != nil {

		// query param runAt
		var qrRunAt int64
		if o.RunAt != nil {
			qrRunAt = *o.RunAt
		}
		qRunAt := swag.FormatInt64(qrRunAt)
		if qRunAt != "" {
			if err := r.SetQueryParam("runAt", qRunAt); err != nil {
				return err
			}
		}

	}

	// query param runType
	qrRunType := o.RunType
	qRunType := qrRunType
	if qRunType != "" {
		if err := r.SetQueryParam("runType", qRunType); err != nil {
			return err
		}
	}

	// query param version
	qrVersion := o.Version
	qVersion := qrVersion
	if qVersion != "" {
		if err := r.SetQueryParam("version", qVersion); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
