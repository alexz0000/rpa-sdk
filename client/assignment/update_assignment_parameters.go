// Code generated by go-swagger; DO NOT EDIT.

package assignment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUpdateAssignmentParams creates a new UpdateAssignmentParams object
// with the default values initialized.
func NewUpdateAssignmentParams() *UpdateAssignmentParams {
	var ()
	return &UpdateAssignmentParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateAssignmentParamsWithTimeout creates a new UpdateAssignmentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateAssignmentParamsWithTimeout(timeout time.Duration) *UpdateAssignmentParams {
	var ()
	return &UpdateAssignmentParams{

		timeout: timeout,
	}
}

// NewUpdateAssignmentParamsWithContext creates a new UpdateAssignmentParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateAssignmentParamsWithContext(ctx context.Context) *UpdateAssignmentParams {
	var ()
	return &UpdateAssignmentParams{

		Context: ctx,
	}
}

// NewUpdateAssignmentParamsWithHTTPClient creates a new UpdateAssignmentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateAssignmentParamsWithHTTPClient(client *http.Client) *UpdateAssignmentParams {
	var ()
	return &UpdateAssignmentParams{
		HTTPClient: client,
	}
}

/*UpdateAssignmentParams contains all the parameters to send to the API endpoint
for the update assignment operation typically these are written to a http.Request
*/
type UpdateAssignmentParams struct {

	/*ID
	  The assignment's id

	*/
	ID string
	/*MaxRunTime
	  How long the job could be executed

	*/
	MaxRunTime *int64
	/*RunType
	  What type the job will be executed
	The values are 'asap','laterThan','inOrder'

	*/
	RunType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update assignment params
func (o *UpdateAssignmentParams) WithTimeout(timeout time.Duration) *UpdateAssignmentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update assignment params
func (o *UpdateAssignmentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update assignment params
func (o *UpdateAssignmentParams) WithContext(ctx context.Context) *UpdateAssignmentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update assignment params
func (o *UpdateAssignmentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update assignment params
func (o *UpdateAssignmentParams) WithHTTPClient(client *http.Client) *UpdateAssignmentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update assignment params
func (o *UpdateAssignmentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the update assignment params
func (o *UpdateAssignmentParams) WithID(id string) *UpdateAssignmentParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the update assignment params
func (o *UpdateAssignmentParams) SetID(id string) {
	o.ID = id
}

// WithMaxRunTime adds the maxRunTime to the update assignment params
func (o *UpdateAssignmentParams) WithMaxRunTime(maxRunTime *int64) *UpdateAssignmentParams {
	o.SetMaxRunTime(maxRunTime)
	return o
}

// SetMaxRunTime adds the maxRunTime to the update assignment params
func (o *UpdateAssignmentParams) SetMaxRunTime(maxRunTime *int64) {
	o.MaxRunTime = maxRunTime
}

// WithRunType adds the runType to the update assignment params
func (o *UpdateAssignmentParams) WithRunType(runType *string) *UpdateAssignmentParams {
	o.SetRunType(runType)
	return o
}

// SetRunType adds the runType to the update assignment params
func (o *UpdateAssignmentParams) SetRunType(runType *string) {
	o.RunType = runType
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateAssignmentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param Id
	if err := r.SetPathParam("Id", o.ID); err != nil {
		return err
	}

	if o.MaxRunTime != nil {

		// query param maxRunTime
		var qrMaxRunTime int64
		if o.MaxRunTime != nil {
			qrMaxRunTime = *o.MaxRunTime
		}
		qMaxRunTime := swag.FormatInt64(qrMaxRunTime)
		if qMaxRunTime != "" {
			if err := r.SetQueryParam("maxRunTime", qMaxRunTime); err != nil {
				return err
			}
		}

	}

	if o.RunType != nil {

		// query param runType
		var qrRunType string
		if o.RunType != nil {
			qrRunType = *o.RunType
		}
		qRunType := qrRunType
		if qRunType != "" {
			if err := r.SetQueryParam("runType", qRunType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
